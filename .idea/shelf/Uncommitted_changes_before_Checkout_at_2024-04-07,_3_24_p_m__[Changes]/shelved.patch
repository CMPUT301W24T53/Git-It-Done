Index: app/src/main/java/com/example/gidevents/ParticipantListActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.gidevents;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.widget.Button;\nimport android.widget.ListView;\n\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.google.firebase.firestore.CollectionReference;\nimport com.google.firebase.firestore.DocumentReference;\nimport com.google.firebase.firestore.EventListener;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.FirebaseFirestoreException;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\nimport com.google.firebase.firestore.QuerySnapshot;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ParticipantListActivity extends AppCompatActivity {\n    private FirebaseFirestore db;\n    String eventID;\n    CollectionReference participantRef;\n    private ArrayList<Map<String, Object>> participantList = new ArrayList<>();\n    private ListView listView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.participant_list_page);\n\n        db = FirebaseFirestore.getInstance();\n\n        Events eventDetails = (Events) getIntent().getSerializableExtra(\"eventDetails\");\n        eventID = eventDetails.getEventID();\n\n        CheckInsAdapter adapter = new CheckInsAdapter(this, participantList);\n        listView = findViewById(R.id.organizer_participants_listview);\n        listView.setAdapter(adapter);\n\n        participantRef = db.collection(\"Events\").document(eventID).collection(\"participants\");\n\n        participantRef.addSnapshotListener(new EventListener<QuerySnapshot>() {\n            @Override\n            public void onEvent(@Nullable QuerySnapshot querySnapshots, @Nullable FirebaseFirestoreException error) {\n                if (error != null) {\n                    Log.e(\"Firestore\", error.toString());\n                    return;\n                }\n                if (querySnapshots != null) {\n                    participantList.clear();\n                    for (QueryDocumentSnapshot doc : querySnapshots) {\n                        String participantID = doc.getId();\n                        db.collection(\"Events\").document(eventID).collection(\"participants\").document(participantID).get()\n                                .addOnSuccessListener(participant -> {\n                                    if (participant.exists()) {\n                                        Map<String,Object> data = participant.getData();\n\n                                        participantList.add(data);\n                                        adapter.notifyDataSetChanged();\n                                    }\n                                })\n                                .addOnFailureListener(e -> Log.e(\"Firestore\", \"Unable to fetch participant\"));\n                    }\n                }\n\n            }\n\n        });\n\n        Button back_button = findViewById(R.id.back_button);\n\n        back_button.setOnClickListener(v -> {\n            finish();\n        });\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/gidevents/ParticipantListActivity.java b/app/src/main/java/com/example/gidevents/ParticipantListActivity.java
--- a/app/src/main/java/com/example/gidevents/ParticipantListActivity.java	(revision 2a92eecebc41f890a34033976f4d69d11964e75f)
+++ b/app/src/main/java/com/example/gidevents/ParticipantListActivity.java	(date 1712525037476)
@@ -33,49 +33,49 @@
         super.onCreate(savedInstanceState);
         setContentView(R.layout.participant_list_page);
 
-        db = FirebaseFirestore.getInstance();
-
-        Events eventDetails = (Events) getIntent().getSerializableExtra("eventDetails");
-        eventID = eventDetails.getEventID();
-
-        CheckInsAdapter adapter = new CheckInsAdapter(this, participantList);
-        listView = findViewById(R.id.organizer_participants_listview);
-        listView.setAdapter(adapter);
-
-        participantRef = db.collection("Events").document(eventID).collection("participants");
-
-        participantRef.addSnapshotListener(new EventListener<QuerySnapshot>() {
-            @Override
-            public void onEvent(@Nullable QuerySnapshot querySnapshots, @Nullable FirebaseFirestoreException error) {
-                if (error != null) {
-                    Log.e("Firestore", error.toString());
-                    return;
-                }
-                if (querySnapshots != null) {
-                    participantList.clear();
-                    for (QueryDocumentSnapshot doc : querySnapshots) {
-                        String participantID = doc.getId();
-                        db.collection("Events").document(eventID).collection("participants").document(participantID).get()
-                                .addOnSuccessListener(participant -> {
-                                    if (participant.exists()) {
-                                        Map<String,Object> data = participant.getData();
-
-                                        participantList.add(data);
-                                        adapter.notifyDataSetChanged();
-                                    }
-                                })
-                                .addOnFailureListener(e -> Log.e("Firestore", "Unable to fetch participant"));
-                    }
-                }
-
-            }
-
-        });
-
-        Button back_button = findViewById(R.id.back_button);
-
-        back_button.setOnClickListener(v -> {
-            finish();
-        });
+//        db = FirebaseFirestore.getInstance();
+//
+//        Events eventDetails = (Events) getIntent().getSerializableExtra("eventDetails");
+//        eventID = eventDetails.getEventID();
+//
+//        //CheckInsAdapter adapter = new CheckInsAdapter(this, participantList);
+//        listView = findViewById(R.id.organizer_participants_listview);
+//        listView.setAdapter(adapter);
+//
+//        participantRef = db.collection("Events").document(eventID).collection("participants");
+//
+//        participantRef.addSnapshotListener(new EventListener<QuerySnapshot>() {
+//            @Override
+//            public void onEvent(@Nullable QuerySnapshot querySnapshots, @Nullable FirebaseFirestoreException error) {
+//                if (error != null) {
+//                    Log.e("Firestore", error.toString());
+//                    return;
+//                }
+//                if (querySnapshots != null) {
+//                    participantList.clear();
+//                    for (QueryDocumentSnapshot doc : querySnapshots) {
+//                        String participantID = doc.getId();
+//                        db.collection("Events").document(eventID).collection("participants").document(participantID).get()
+//                                .addOnSuccessListener(participant -> {
+//                                    if (participant.exists()) {
+//                                        Map<String,Object> data = participant.getData();
+//
+//                                        participantList.add(data);
+//                                        adapter.notifyDataSetChanged();
+//                                    }
+//                                })
+//                                .addOnFailureListener(e -> Log.e("Firestore", "Unable to fetch participant"));
+//                    }
+//                }
+//
+//            }
+//
+//        });
+//
+//        Button back_button = findViewById(R.id.back_button);
+//
+//        back_button.setOnClickListener(v -> {
+//            finish();
+//        });
     }
 }
